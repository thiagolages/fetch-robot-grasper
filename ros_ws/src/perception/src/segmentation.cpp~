#include "perception/segmentation.h"

#include "pcl/PointIndices.h"
#include "pcl/point_cloud.h"
#include "pcl/point_types.h"
#include "pcl_conversions/pcl_conversions.h"
#include "ros/ros.h"
#include "sensor_msgs/PointCloud2.h"

#include "pcl/filters/crop_box.h"
#include "pcl/common/common.h"
#include <visualization_msgs/Marker.h>

#include <sstream>

typedef pcl::PointXYZRGB PointC;
typedef pcl::PointCloud<pcl::PointXYZRGB> PointCloudC;

namespace perception {

visualization_msgs::Marker marker;

void SegmentSurface(PointCloudC::Ptr cloud) {

	ROS_INFO("Got point cloud with %ld points", cloud->size());
	PointC min_pcl;
	PointC max_pcl;
	PointC centroid;
	pcl::getMinMax3D<PointC>(*cloud, min_pcl, max_pcl);
	centroid.x=(min_pcl.x + max_pcl.x)/2;
	centroid.y=(min_pcl.y + max_pcl.y)/2;
	centroid.z=(min_pcl.z + max_pcl.z)/2;
	ROS_INFO("Centroid: X: %f, Y: %f, Z: %f", centroid.x, centroid.y, centroid.z);


			//////////////////
			//MARKER
			//////////////////

					marker.header.frame_id = "head_camera_link";
					marker.header.stamp = ros::Time();
					marker.ns = "my_namespace";
					marker.id = 0;
					marker.type = visualization_msgs::Marker::SPHERE;
					marker.action = visualization_msgs::Marker::ADD;
					marker.pose.position.x = centroid.z-0.8;
					marker.pose.position.y = -centroid.x;
					marker.pose.position.z = -centroid.y;
					marker.pose.orientation.x = 1;
					marker.pose.orientation.y = 1;
					marker.pose.orientation.z = 1;
					marker.pose.orientation.w = 1.0;
					marker.scale.x = 0.05;
					marker.scale.y = 0.05;
					marker.scale.z = 0.05;
					marker.color.a = 1.0; // Don't forget to set the alpha!
					marker.color.r = 0.0;
					marker.color.g = 1.0;
					marker.color.b = 0.0;
						ROS_INFO("Updated Marker");
			//////////////////

			//////////////////
			//MARKER
			//////////////////

/*
					marker.header.frame_id = "head_camera_link";
					marker.header.stamp = ros::Time();
					marker.ns = "my_namespace";
					marker.id = 0;
					marker.type = visualization_msgs::Marker::SPHERE;
					marker.action = visualization_msgs::Marker::ADD;
					marker.pose.position.x = 0;
					marker.pose.position.y = 0;
					marker.pose.position.z = 0;
					marker.pose.orientation.x = 1;
					marker.pose.orientation.y = 1;
					marker.pose.orientation.z = 1;
					marker.pose.orientation.w = 1.0;
					marker.scale.x = 0.05;
					marker.scale.y = 0.05;
					marker.scale.z = 0.05;
					marker.color.a = 1.0; // Don't forget to set the alpha!
					marker.color.r = 0.0;
					marker.color.g = 1.0;
					marker.color.b = 0.0;
						ROS_INFO("Updated Marker");
			//////////////////
*/
}

Segmenter::Segmenter(const ros::Publisher& centroid_pub)
    : centroid_pub_(centroid_pub) {}


void Segmenter::Callback(const sensor_msgs::PointCloud2& msg) {
  PointCloudC::Ptr cloud(new PointCloudC());
  pcl::fromROSMsg(msg, *cloud);
	SegmentSurface(cloud);
		 // sensor_msgs::PointCloud2 msg_out;
		 // pcl::toROSMsg(*cropped_cloud, msg_out);
  centroid_pub_.publish(marker);
}
}  // namespace perception
